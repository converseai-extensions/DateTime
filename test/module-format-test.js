/**
 * @file test/module-format-test.js
 * @author graeme@converse.ai
 * @description This module will format any date or time to a human
 * readable form.
 *
 * Generated by the converse-cli tool for use with the ConverseAI
 * Plugins SDK. https://developers.converse.ai/
 */

const request     = require('supertest');
const expect      = require('chai').expect;
const server      = require('./lib/express');
const moment      = require('moment');
const debug       = require('debug')('test:format');

describe('Format Date', function () {

  it('without input', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: undefined,
            format: undefined,
            customized_format: undefined,
            other_input: undefined
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('Invalid date');
        done();
      });
  })

  it('with unparsed date', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: '23rd June 2017',
            format: 'CUSTOM',
            customized_format: 'Thursday 6th January, 2017',
            other_input: undefined
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('Invalid date');
        done();
      });
  })

  it('with ISO8601 input && format', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: '2017-06-23T10:26:18.388',
            format: 'DD/MM/YY HH:mm',
            customized_format: undefined,
            other_input: undefined
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('23/06/17 10:26');
        done();
      });
  })

  it('with ISO8601 input && customized format', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: '2017-06-23T10:26:18.388',
            format: 'CUSTOM',
            customized_format: 'Thursday 6th January, 2017 @ 9pm',
            other_input: undefined
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('Friday 23rd June, 2017 @ 10am');
        done();
      });
  })


  it('with ISO8601 input has offset && customized format', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: '2017-06-23T10:26:18+02:00',
            format: 'CUSTOM',
            customized_format: 'Thursday 6th January, 2017 @ 9pm',
            other_input: undefined
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('Friday 23rd June, 2017 @ 10am');
        done();
      });
  })


  it('with parsed input && customized format', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: {
              years: 2017,
              months: 7,
              date: 2,
              hours: 21,
              minutes: 30,
              seconds: 0,
              milliseconds: 0,
              iso: '2017-07-02T21:30:00Z',
              unix: 1499031000,
              offset: '+00:00'
            },
            format: 'CUSTOM',
            customized_format: 'DD-MM-YYYY HH:mm:ss',
            other_input: undefined
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('02-07-2017 21:30:00');
        done();
      });
  })


  it('with parsed input && customized format && offset', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: {
              years: 2017,
              months: 7,
              date: 2,
              hours: 23,
              minutes: 0,
              seconds: 0,
              milliseconds: 0,
              iso: '2017-07-02T23:00:00+01:30',
              unix: 1499031000,
              offset: '+01:30'
            },
            format: 'CUSTOM',
            customized_format: 'DD-MM-YYYY HH:mm:ss',
            other_input: undefined
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('02-07-2017 23:00:00');
        done();
      });
  })


  it('from X', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: '2017-06-23T10:26:18.388',
            format: 'RELATIVE',
            customized_format: undefined,
            other_input: '2017-05-23T10:26:18.388'
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('in a month');
        done();
      });
  })

  it('to X', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: '2017-05-23T10:26:18.388',
            format: 'RELATIVE',
            customized_format: undefined,
            other_input: '2017-06-23T10:26:18.388'
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('a month ago');
        done();
      });
  })




  it('from parsed X', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: {
              utc: '2017-07-02T23:00:00+00:00',
            },
            format: 'RELATIVE',
            customized_format: undefined,
            other_input: {
              utc: '2017-06-02T23:00:00+00:00',
            },
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('in a month');
        done();
      });
  })

  it('to parsed X', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: {
              utc: '2017-06-02T23:00:00+00:00',
            },
            format: 'RELATIVE',
            customized_format: undefined,
            other_input: {
              utc: '2017-07-02T23:00:00+00:00',
            },
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal('a month ago');
        done();
      });
  })


  it('from parsed X to now', function(done) {
    var input = moment.utc().startOf('day');
    var now = moment.utc();
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: {
              utc: input.format(),
            },
            format: 'RELATIVE',
            customized_format: undefined,
            other_input: undefined
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal(now.to(input));
        done();
      });
  })

  it('to parsed X from now', function(done) {
    var input = moment.utc().add(1, 'day').startOf('day');
    var now = moment.utc();
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'format',
          moduleParam: {
            input: {
              utc: input.format(),
            },
            format: 'RELATIVE',
            customized_format: undefined,
            other_input: undefined
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        debug(res.body.value);
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value').to.have.property('formatted').to.equal(now.to(input));
        done();
      });
  })


});
