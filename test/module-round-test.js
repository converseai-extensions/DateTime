/**
 * @file test/module-round-test.js
 * @author graeme@converse.ai
 * @description Return start or end of unit in time of a Date/Time
 * object.
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

const expect      = require('chai').expect;
const test        = require('./lib/request-test').testDate;

describe('Round Date/Time', function () {

    /* * * * * * * * * * * * * * * * * *
    * Without Input
    * * * * * * * * * * * * * * * * * */

    it('without input', function(done) {
      test({}, function(err, res, done) {
        expect(res.body).to.have.property('status').to.equal(1);
        expect(res.body).to.have.property('error').to.have.property('httpStatus').to.equal(400);
        done();
      }, done, 'round');
    })

    /* * * * * * * * * * * * * * * * * *
    * Start Of && ISO_8601 && NO OFFSET
    * * * * * * * * * * * * * * * * * */

    it('Start Of Year with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'Start',
        unit: 'Year',
      }, {
        years: 2017,
        months: 1,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-01-01T00:00:00+00:00',
        utc: '2017-01-01T00:00:00+00:00',
        unix: 1483228800,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Quarter with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'Start',
        unit: 'Quarter',
      }, {
        years: 2017,
        months: 7,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-01T00:00:00+00:00',
        utc: '2017-07-01T00:00:00+00:00',
        unix: 1498867200,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Month with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'Start',
        unit: 'Month',
      }, {
        years: 2017,
        months: 7,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-01T00:00:00+00:00',
        utc: '2017-07-01T00:00:00+00:00',
        unix: 1498867200,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Day with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'Start',
        unit: 'Day',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-02T00:00:00+00:00',
        utc: '2017-07-02T00:00:00+00:00',
        unix: 1498953600,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Hour with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'Start',
        unit: 'Hour',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-02T21:00:00+00:00',
        utc: '2017-07-02T21:00:00+00:00',
        unix: 1499029200,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Minute with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'Start',
        unit: 'Minute',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 30,
        seconds: 0,
        iso: '2017-07-02T21:30:00+00:00',
        utc: '2017-07-02T21:30:00+00:00',
        unix: 1499031000,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })


    /* * * * * * * * * * * * * * * * * *
    * Start Of && ISO_8601 && OFFSET
    * * * * * * * * * * * * * * * * * */

    it('Start Of Year with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'Start',
        unit: 'Year',
      }, {
        years: 2017,
        months: 1,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-01-01T00:00:00-07:00',
        utc: '2017-01-01T07:00:00+00:00',
        unix: 1483254000,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Quarter with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'Start',
        unit: 'Quarter',
      }, {
        years: 2017,
        months: 7,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-01T00:00:00-07:00',
        utc: '2017-07-01T07:00:00+00:00',
        unix: 1498892400,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Month with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'Start',
        unit: 'Month',
      }, {
        years: 2017,
        months: 7,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-01T00:00:00-07:00',
        utc: '2017-07-01T07:00:00+00:00',
        unix: 1498892400,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })


    it('Start Of Day with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'Start',
        unit: 'Day',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-02T00:00:00-07:00',
        utc: '2017-07-02T07:00:00+00:00',
        unix: 1498978800,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Hour with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'Start',
        unit: 'Hour',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-02T21:00:00-07:00',
        utc: '2017-07-03T04:00:00+00:00',
        unix: 1499054400,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Minute with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'Start',
        unit: 'Minute',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 30,
        seconds: 0,
        iso: '2017-07-02T21:30:00-07:00',
        utc: '2017-07-03T04:30:00+00:00',
        unix: 1499056200,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    /* * * * * * * * * * * * * * * * * *
    * End Of && ISO_8601 && NO OFFSET
    * * * * * * * * * * * * * * * * * */

    it('End Of Year with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'End',
        unit: 'Year',
      }, {
        years: 2017,
        months: 12,
        date: 31,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-12-31T23:59:59+00:00',
        utc: '2017-12-31T23:59:59+00:00',
        unix: 1514764799,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Quarter with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'End',
        unit: 'Quarter',
      }, {
        years: 2017,
        months: 9,
        date: 30,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-09-30T23:59:59+00:00',
        utc: '2017-09-30T23:59:59+00:00',
        unix: 1506815999,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Month with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'End',
        unit: 'Month',
      }, {
        years: 2017,
        months: 7,
        date: 31,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-31T23:59:59+00:00',
        utc: '2017-07-31T23:59:59+00:00',
        unix: 1501545599,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Day with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'End',
        unit: 'Day',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-02T23:59:59+00:00',
        utc: '2017-07-02T23:59:59+00:00',
        unix: 1499039999,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Hour with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'End',
        unit: 'Hour',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-02T21:59:59+00:00',
        utc: '2017-07-02T21:59:59+00:00',
        unix: 1499032799,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Minute with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'End',
        unit: 'Minute',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 30,
        seconds: 59,
        iso: '2017-07-02T21:30:59+00:00',
        utc: '2017-07-02T21:30:59+00:00',
        unix: 1499031059,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })


    /* * * * * * * * * * * * * * * * * *
    * End Of && ISO_8601 && OFFSET
    * * * * * * * * * * * * * * * * * */

    it('End Of Year with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'End',
        unit: 'Year',
      }, {
        years: 2017,
        months: 12,
        date: 31,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-12-31T23:59:59-07:00',
        utc: '2018-01-01T06:59:59+00:00',
        unix: 1514789999,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Year with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'End',
        unit: 'Quarter',
      }, {
        years: 2017,
        months: 9,
        date: 30,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-09-30T23:59:59-07:00',
        utc: '2017-10-01T06:59:59+00:00',
        unix: 1506841199,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Month with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'End',
        unit: 'Month',
      }, {
        years: 2017,
        months: 7,
        date: 31,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-31T23:59:59-07:00',
        utc: '2017-08-01T06:59:59+00:00',
        unix: 1501570799,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })


    it('End Of Day with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'End',
        unit: 'Day',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-02T23:59:59-07:00',
        utc: '2017-07-03T06:59:59+00:00',
        unix: 1499065199,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Hour with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'End',
        unit: 'Hour',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-02T21:59:59-07:00',
        utc: '2017-07-03T04:59:59+00:00',
        unix: 1499057999,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Minute with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'End',
        unit: 'Minute',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 30,
        seconds: 59,
        iso: '2017-07-02T21:30:59-07:00',
        utc: '2017-07-03T04:30:59+00:00',
        unix: 1499056259,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })


    /* * * * * * * * * * * * * * * * * *
    * Start Of && Parsed && NO OFFSET
    * * * * * * * * * * * * * * * * * */

    it('Start Of Year with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'Start',
        unit: 'Year',
      }, {
        years: 2017,
        months: 1,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-01-01T00:00:00+00:00',
        utc: '2017-01-01T00:00:00+00:00',
        unix: 1483228800,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Quarter with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'Start',
        unit: 'Quarter',
      }, {
        years: 2017,
        months: 7,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-01T00:00:00+00:00',
        utc: '2017-07-01T00:00:00+00:00',
        unix: 1498867200,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Month with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'Start',
        unit: 'Month',
      }, {
        years: 2017,
        months: 7,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-01T00:00:00+00:00',
        utc: '2017-07-01T00:00:00+00:00',
        unix: 1498867200,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Day with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'Start',
        unit: 'Day',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-02T00:00:00+00:00',
        utc: '2017-07-02T00:00:00+00:00',
        unix: 1498953600,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Hour with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'Start',
        unit: 'Hour',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-02T21:00:00+00:00',
        utc: '2017-07-02T21:00:00+00:00',
        unix: 1499029200,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Minute with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'Start',
        unit: 'Minute',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 30,
        seconds: 0,
        iso: '2017-07-02T21:30:00+00:00',
        utc: '2017-07-02T21:30:00+00:00',
        unix: 1499031000,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })


    /* * * * * * * * * * * * * * * * * *
    * Start Of && Parsed && OFFSET
    * * * * * * * * * * * * * * * * * */

    it('Start Of Year with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'Start',
        unit: 'Year',
      }, {
        years: 2017,
        months: 1,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-01-01T00:00:00-07:00',
        utc: '2017-01-01T07:00:00+00:00',
        unix: 1483254000,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Quarter with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'Start',
        unit: 'Quarter',
      }, {
        years: 2017,
        months: 7,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-01T00:00:00-07:00',
        utc: '2017-07-01T07:00:00+00:00',
        unix: 1498892400,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Month with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'Start',
        unit: 'Month',
      }, {
        years: 2017,
        months: 7,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-01T00:00:00-07:00',
        utc: '2017-07-01T07:00:00+00:00',
        unix: 1498892400,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })


    it('Start Of Day with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'Start',
        unit: 'Day',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-02T00:00:00-07:00',
        utc: '2017-07-02T07:00:00+00:00',
        unix: 1498978800,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Hour with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'Start',
        unit: 'Hour',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-02T21:00:00-07:00',
        utc: '2017-07-03T04:00:00+00:00',
        unix: 1499054400,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Minute with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'Start',
        unit: 'Minute',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 30,
        seconds: 0,
        iso: '2017-07-02T21:30:00-07:00',
        utc: '2017-07-03T04:30:00+00:00',
        unix: 1499056200,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    /* * * * * * * * * * * * * * * * * *
    * End Of && Parsed && NO OFFSET
    * * * * * * * * * * * * * * * * * */

    it('End Of Year with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'End',
        unit: 'Year',
      }, {
        years: 2017,
        months: 12,
        date: 31,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-12-31T23:59:59+00:00',
        utc: '2017-12-31T23:59:59+00:00',
        unix: 1514764799,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Quarter with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'End',
        unit: 'Quarter',
      }, {
        years: 2017,
        months: 9,
        date: 30,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-09-30T23:59:59+00:00',
        utc: '2017-09-30T23:59:59+00:00',
        unix: 1506815999,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Month with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'End',
        unit: 'Month',
      }, {
        years: 2017,
        months: 7,
        date: 31,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-31T23:59:59+00:00',
        utc: '2017-07-31T23:59:59+00:00',
        unix: 1501545599,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Day with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'End',
        unit: 'Day',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-02T23:59:59+00:00',
        utc: '2017-07-02T23:59:59+00:00',
        unix: 1499039999,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Hour with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'End',
        unit: 'Hour',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-02T21:59:59+00:00',
        utc: '2017-07-02T21:59:59+00:00',
        unix: 1499032799,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Minute with Parsed input ({2017-07-02T21:30:00+00:00})', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '+00:00',
          iso: '2017-07-02T21:30:00+00:00',
          utc: '2017-07-02T21:30:00+00:00',
          unix: 1499031000
        },
        start_or_end: 'End',
        unit: 'Minute',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 30,
        seconds: 59,
        iso: '2017-07-02T21:30:59+00:00',
        utc: '2017-07-02T21:30:59+00:00',
        unix: 1499031059,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })


    /* * * * * * * * * * * * * * * * * *
    * End Of && Parsed && OFFSET
    * * * * * * * * * * * * * * * * * */

    it('End Of Year with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'End',
        unit: 'Year',
      }, {
        years: 2017,
        months: 12,
        date: 31,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-12-31T23:59:59-07:00',
        utc: '2018-01-01T06:59:59+00:00',
        unix: 1514789999,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Quarter with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'End',
        unit: 'Quarter',
      }, {
        years: 2017,
        months: 9,
        date: 30,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-09-30T23:59:59-07:00',
        utc: '2017-10-01T06:59:59+00:00',
        unix: 1506841199,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Month with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'End',
        unit: 'Month',
      }, {
        years: 2017,
        months: 7,
        date: 31,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-31T23:59:59-07:00',
        utc: '2017-08-01T06:59:59+00:00',
        unix: 1501570799,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })


    it('End Of Day with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'End',
        unit: 'Day',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-02T23:59:59-07:00',
        utc: '2017-07-03T06:59:59+00:00',
        unix: 1499065199,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Hour with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'End',
        unit: 'Hour',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-02T21:59:59-07:00',
        utc: '2017-07-03T04:59:59+00:00',
        unix: 1499057999,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Minute with Parsed input ({2017-07-02T21:30:00-07:00}) and offset (-07:00)', function(done) {
      test({
        input: {
          years: 2017,
          months: 7,
          date: 2,
          hours: 21,
          minutes: 30,
          seconds: 0,
          milliseconds: 0,
          offset: '-07:00',
          iso: '2017-07-02T21:30:00-07:00',
          utc: '2017-07-03T04:30:00+00:00',
          unix: 1499056200,
        },
        start_or_end: 'End',
        unit: 'Minute',
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 21,
        minutes: 30,
        seconds: 59,
        iso: '2017-07-02T21:30:59-07:00',
        utc: '2017-07-03T04:30:59+00:00',
        unix: 1499056259,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })


    /* * * * * * * * * * * * * * * * * *
    * Start of WEEK && ISO_8601 && NO OFFSET
    * * * * * * * * * * * * * * * * * */

    it('Start Of Week (Wednesday/-4) with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'Start',
        unit: 'Week',
        weekday: 3,
      }, {
        years: 2017,
        months: 6,
        date: 28,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-06-28T00:00:00+00:00',
        utc: '2017-06-28T00:00:00+00:00',
        unix: 1498608000,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Week (Wednesday/+2) with ISO_8601 input (2017-06-26T21:30:00+00:00)', function(done) {
      test({
        input: '2017-06-26T21:30:00+00:00',
        start_or_end: 'Start',
        unit: 'Week',
        weekday: 3,
      }, {
        years: 2017,
        months: 6,
        date: 21,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-06-21T00:00:00+00:00',
        utc: '2017-06-21T00:00:00+00:00',
        unix: 1498003200,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Week (Sunday/Today) with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'Start',
        unit: 'Week',
        weekday: 7,
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-02T00:00:00+00:00',
        utc: '2017-07-02T00:00:00+00:00',
        unix: 1498953600,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    /* * * * * * * * * * * * * * * * * *
    * Start of WEEK && ISO_8601 && OFFSET
    * * * * * * * * * * * * * * * * * */

    it('Start Of Week (Wednesday/-4) with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'Start',
        unit: 'Week',
        weekday: 3,
      }, {
        years: 2017,
        months: 6,
        date: 28,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-06-28T00:00:00-07:00',
        utc: '2017-06-28T07:00:00+00:00',
        unix: 1498633200,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Week (Wednesday/+2) with ISO_8601 input (2017-06-26T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-06-26T21:30:00-07:00',
        start_or_end: 'Start',
        unit: 'Week',
        weekday: 3,
      }, {
        years: 2017,
        months: 6,
        date: 21,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-06-21T00:00:00-07:00',
        utc: '2017-06-21T07:00:00+00:00',
        unix: 1498028400,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('Start Of Week (Sunday/Today) with ISO_8601 input (2017-07-02T21:30:00-07:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'Start',
        unit: 'Week',
        weekday: 7,
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 0,
        minutes: 0,
        seconds: 0,
        iso: '2017-07-02T00:00:00-07:00',
        utc: '2017-07-02T07:00:00+00:00',
        unix: 1498978800,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })



    /* * * * * * * * * * * * * * * * * *
    * Start of WEEK && ISO_8601 && NO OFFSET
    * * * * * * * * * * * * * * * * * */

    it('End Of Week (FirstDay = Monday/-6) with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'End',
        unit: 'Week',
        weekday: 1,
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-02T23:59:59+00:00',
        utc: '2017-07-02T23:59:59+00:00',
        unix: 1499039999,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Week (FirstDay = Wednesday/-4) with ISO_8601 input (2017-07-02T21:30:00+00:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00+00:00',
        start_or_end: 'End',
        unit: 'Week',
        weekday: 3,
      }, {
        years: 2017,
        months: 7,
        date: 4,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-04T23:59:59+00:00',
        utc: '2017-07-04T23:59:59+00:00',
        unix: 1499212799,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Week (FirstDay = Sunday/+4) with ISO_8601 input (2017-06-28T21:30:00+00:00)', function(done) {
      test({
        input: '2017-06-28T21:30:00+00:00',
        start_or_end: 'End',
        unit: 'Week',
        weekday: 7,
      }, {
        years: 2017,
        months: 7,
        date: 1,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-01T23:59:59+00:00',
        utc: '2017-07-01T23:59:59+00:00',
        unix: 1498953599,
        offset: '+00:00',
        isValid: true
      }, done, 'round');
    })


    /* * * * * * * * * * * * * * * * * *
    * Start of WEEK && ISO_8601 && OFFSET
    * * * * * * * * * * * * * * * * * */

    it('End Of Week (FirstDay = Monday/-6) with ISO_8601 input (2017-07-02T21:30:00+00:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'End',
        unit: 'Week',
        weekday: 1,
      }, {
        years: 2017,
        months: 7,
        date: 2,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-02T23:59:59-07:00',
        utc: '2017-07-03T06:59:59+00:00',
        unix: 1499065199,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Week (FirstDay = Wednesday/-4) with ISO_8601 input (2017-07-02T21:30:00+00:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-07-02T21:30:00-07:00',
        start_or_end: 'End',
        unit: 'Week',
        weekday: 3,
      }, {
        years: 2017,
        months: 7,
        date: 4,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-04T23:59:59-07:00',
        utc: '2017-07-05T06:59:59+00:00',
        unix: 1499237999,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })

    it('End Of Week (FirstDay = Sunday/+4) with ISO_8601 input (2017-06-28T21:30:00+00:00) and offset (-07:00)', function(done) {
      test({
        input: '2017-06-28T21:30:00-07:00',
        start_or_end: 'End',
        unit: 'Week',
        weekday: 7,
      }, {
        years: 2017,
        months: 7,
        date: 1,
        hours: 23,
        minutes: 59,
        seconds: 59,
        iso: '2017-07-01T23:59:59-07:00',
        utc: '2017-07-02T06:59:59+00:00',
        unix: 1498978799,
        offset: '-07:00',
        isValid: true
      }, done, 'round');
    })
});
