/**
 * @file check.js
 * @author graeme+admin@converse.ai
 * @description Check an input date against specified conditions
 * and route your template accordingly.
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const Utils           = require('../lib/utils.js');

module.exports = function check (app, body) {
 /**
  * Registration parameters are assigned to body.payload.registrationData
  * and Module parameters are assigned to body.payload.moduleParam.
  * @example
  * var regOne = body.payload.registrationData.regOne;
  * var modOne = body.payload.moduleParam.modOne;
  */

  /** @type {String} input Accepts text in the international ISO 8601
  * or RFC 2822 formats. Will also accept the response from the
  * Parse Date module as input.  */
  var input = body.payload.moduleParam.input;

  /** @type {String} condition Specify the condition to check input
  * date against.  */
  var condition = body.payload.moduleParam.condition;

  /** @type {String} reference1   */
  var reference1 = body.payload.moduleParam.reference_1;

  /** @type {String} reference2   */
  var reference2 = body.payload.moduleParam.reference_2;

  /** @type {Boolean} inclusive   */
  var inclusive = body.payload.moduleParam.inclusive;

  var days = body.payload.moduleParam.days;

  function compare(condition, date, ref, inclusive) {
    if (condition !== undefined && date !== undefined && ref !== undefined) {
      condition = (inclusive ? 'isSameOr' : 'is') + condition;
      return date[condition](ref);
    }
  }

  function contains(a, o) {
    return a.map((e) => { return e.toLowerCase(); }).indexOf(o.toLowerCase()) > -1
  }

  if (input !== undefined && condition !== undefined) {
    /** @type {ModuleResponse} response The Converse AI response to respond with. */
    var response = new ModuleResponse();

    var date = Utils.local(input);
    var passed = false;
    switch (condition) {
      case 'isLeapYear':
        passed = date[condition]();
        break;
      case 'isDay':
        if (days) {
          if (contains(days, 'monday'))     { passed = passed || date.isoWeekday() === 1}
          if (contains(days, 'tuesday'))    { passed = passed || date.isoWeekday() === 2}
          if (contains(days, 'wednesday'))  { passed = passed || date.isoWeekday() === 3}
          if (contains(days, 'thursday'))   { passed = passed || date.isoWeekday() === 4}
          if (contains(days, 'friday'))     { passed = passed || date.isoWeekday() === 5}
          if (contains(days, 'saturday'))   { passed = passed || date.isoWeekday() === 6}
          if (contains(days, 'sunday'))     { passed = passed || date.isoWeekday() === 7}
        }
        break;
      case 'isBefore':
        passed = compare('Before', date, Utils.local(reference1), inclusive);
        break;
      case 'isAfter':
        passed = compare('After', date, Utils.local(reference1), inclusive);
        break;
      case 'isBetween':
        passed = compare('Before', date, Utils.local(reference1), inclusive) && compare('After', date, Utils.local(reference1), inclusive);
        break;
      default:

    }

    response.setExit((passed === true) ? 'Success' : 'Failed');
    /*
    * This will return a success status and response to the conversation.
    * It is important to always call this method when the module has finished
    * computing regardless of whether you wish to send a response or not. If not,
    * the conversation will hang indefinitely.
    */
    app.send(Status.SUCCESS, response);
  } else {
    app.fail({ httpStatus: 400, code: 'REQUIRED_PARAMS_UNDEFINED', description: 'Required parameters are undefined.' });
  }
};
