/**
 * @file format.js
 * @author graeme@converse.ai
 * @description This module will format any date or time to a human
 * readable form.
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const Utils           = require('../lib/utils.js');

module.exports = function format (app, body) {
 /**
  * Registration parameters assigned to body.payload.registrationData
  * and Module parameters assigned to body.payload.moduleParam.
  * @example
  * var regOne = body.payload.registrationData.regOne;
  * var modOne = body.payload.moduleParam.modOne;
  */

  /** @type {String} input Accepts text in the international ISO 8601
  * or RFC 2822 formats. Will also accept the response from the
  * Parse Date module as input.  */
  var input = body.payload.moduleParam.input;

  /** @type {String} format The format you wish to retrieve from the
  * module. Some formats have advanced options below.  */
  var format = body.payload.moduleParam.format;

  /** @type {String} customizedFormat Using a list of tokens to create
  * a customized format.  */
  var customizedFormat = body.payload.moduleParam.customized_format;

  /** @type {String} otherInput The date to compare to. Accepts the
  * same formats as the first input.  */
  var otherInput = body.payload.moduleParam.other_input;


  /** @type {ModuleResponse} response The Converse AI response to respond with. */
  var response = new ModuleResponse();

  var ret;

  if (format) {
    switch (format) {
      case "RELATIVE":
        input = Utils.local(input, 'utc');
        otherInput = Utils.local(otherInput, 'utc');
        if (!otherInput.isValid()) {
          otherInput = Utils.now();
        }
        ret = otherInput.to(input);
      break;
      case "CUSTOM":
        format = Utils.format(customizedFormat);
      default:
        input = Utils.local(input, 'iso');
        ret = input.format(format);
      break;
    }
  } else {
    ret = Utils.local(input, 'iso').format()
  }

  /*
  * Set an object on the response. This object will be returned to and stored
  * on the current conversation state. It is important to ensure the JSON
  * definition of this module has `hasReturn` set to true. E.g. if this module
  * is fired from a state called `myState` then the object can be accessed with
  * handlebars like:
  * {{states.myState.momentjs.format}}
  */
  response.setValue({formatted: ret});

  /*
  * This will return a success status and response to the conversation.
  * It is important to always call this method when the module has finished
  * computing regardless of whether you wish to send a response or not. If not,
  * the conversation will hang indefinitely.
  */
  app.send(Status.SUCCESS, response);
};
