/**
 * @file manipulate.js
 * @author graeme@converse.ai
 * @description Add or subtract a unit of time from a parsed date
 * object.
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const Utils           = require('../lib/utils.js');

module.exports = function manipulate (app, body) {
 /**
  * Registration parameters are assigned to body.payload.registrationData
  * and Module parameters are assigned to body.payload.moduleParam.
  * @example
  * var regOne = body.payload.registrationData.regOne;
  * var modOne = body.payload.moduleParam.modOne;
  */

  /** @type {String} operation Manipulate the input date by choosing
  * to add or subtract a unit of time.  */
  var operation = body.payload.moduleParam.operation && body.payload.moduleParam.operation.toLowerCase();

  /** @type {String} input   */
  var input = body.payload.moduleParam.input;

  /** @type {String} iso A duration represented as ISO-8601 duration
  * string or the output of the Compare Date/Time module. */
  var iso = body.payload.moduleParam.iso;

  function operate(date, operation, unit, modifier) {
    var value = body.payload.moduleParam[unit];
    if (value != undefined && date[operation]) {
      value = modifier && modifier(value) || value;
      if (operation === 'set') {
        if (unit === 'months') value --;
        if (unit === 'days') unit = 'date';
        date[operation](unit, value);
      } else {
        date[operation](value, unit);
      }
    }
  }

  if (input != undefined && operation != undefined) {
    /** @type {ModuleResponse} response The Converse AI response to respond with. */
    var response = new ModuleResponse();

    var date = Utils.local(input);

    operate(date, operation, 'iso', Utils.duration);
    operate(date, operation, 'years');
    operate(date, operation, 'months');
    operate(date, operation, 'days');
    operate(date, operation, 'hours');
    operate(date, operation, 'minutes');
    operate(date, operation, 'seconds');

    /*
    * Set an object on the response. This object will be returned to and stored
    * on the current conversation state. It is important to ensure the JSON
    * definition of this module has `hasReturn` set to true. E.g. if this module
    * is fired from a state called `myState` then the object can be accessed with
    * handlebars like:
    * {{states.myState.trevor10608_momentjs.manipulate}}
    */
    response.setValue(Utils.encode(date));

    /*
    * This will return a success status and response to the conversation.
    * It is important to always call this method when the module has finished
    * computing regardless of whether you wish to send a response or not. If not,
    * the conversation will hang indefinitely.
    */
    app.send(Status.SUCCESS, response);
  } else {
    app.fail({ httpStatus: 400, code: 'REQUIRED_PARAMS_UNDEFINED', description: 'Required parameters are undefined.' });
  }
};
