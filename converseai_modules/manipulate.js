/**
 * @file manipulate.js
 * @author graeme+admin@converse.ai
 * @description Add or subtract a unit of time from a parsed date
 * object.
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const Utils           = require('../lib/utils.js');

module.exports = function manipulate (app, body) {
 /**
  * Registration parameters are assigned to body.payload.registrationData
  * and Module parameters are assigned to body.payload.moduleParam.
  * @example
  * var regOne = body.payload.registrationData.regOne;
  * var modOne = body.payload.moduleParam.modOne;
  */

  /** @type {String} addOrSub Manipulate the input date by choosing
  * to add or subtract a unit of time.  */
  var addOrSub = body.payload.moduleParam.add_or_sub && body.payload.moduleParam.add_or_sub.toLowerCase();

  /** @type {String} input   */
  var input = body.payload.moduleParam.input;

  /** @type {Number} years How many years to add or subtract from
  * input date.  */
  var years = body.payload.moduleParam.years;

  /** @type {Number} months How many months to add or subtract from
  * the input date.  */
  var months = body.payload.moduleParam.months;

  /** @type {Number} days How many days to add or subtract from the
  * input date.  */
  var days = body.payload.moduleParam.days;

  /** @type {Number} hours How many hours to add or subtract from
  * the input date.  */
  var hours = body.payload.moduleParam.hours;

  /** @type {Number} minutes How many minutes to add or subtract from
  * the input date.  */
  var minutes = body.payload.moduleParam.minutes;

  /** @type {Number} seconds How many seconds to add or subtract from
  * the input date.  */
  var seconds = body.payload.moduleParam.seconds;

  if (input !== undefined && addOrSub !== undefined) {
    /** @type {ModuleResponse} response The Converse AI response to respond with. */
    var response = new ModuleResponse();

    var date = Utils.local(input);

    if (years !== undefined) {
      date[addOrSub](years, 'years');
    }
    if (months !== undefined) {
      date[addOrSub](months, 'months');
    }
    if (days !== undefined) {
      date[addOrSub](days, 'days');
    }
    if (hours !== undefined) {
      date[addOrSub](hours, 'hours');
    }
    if (minutes !== undefined) {
      date[addOrSub](minutes, 'minutes');
    }
    if (seconds !== undefined) {
      date[addOrSub](seconds, 'seconds');
    }

    /*
    * Set an object on the response. This object will be returned to and stored
    * on the current conversation state. It is important to ensure the JSON
    * definition of this module has `hasReturn` set to true. E.g. if this module
    * is fired from a state called `myState` then the object can be accessed with
    * handlebars like:
    * {{states.myState.trevor10608_momentjs.manipulate}}
    */
    response.setValue(Utils.encode(date));

    /*
    * This will return a success status and response to the conversation.
    * It is important to always call this method when the module has finished
    * computing regardless of whether you wish to send a response or not. If not,
    * the conversation will hang indefinitely.
    */
    app.send(Status.SUCCESS, response);
  } else {
    app.fail({ httpStatus: 400, code: 'REQUIRED_PARAMS_UNDEFINED', description: 'Required parameters are undefined.' });
  }
};
